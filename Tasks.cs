------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

public interface IEmployee
{
    void Describe();
}

public class Manager : IEmployee
{
    public void Describe()
    {
        Console.WriteLine("I am Manager!");
    }
}

public class Developer : IEmployee
{
    public void Describe()
    {
        Console.WriteLine("I am Developer!");
    }
}

public class Program
{
    public void Main()
    {
        List<IEmployee> employees = new List<IEmployee>
        {
            new Manager(),
            new Developer()
        };

        foreach (var employee in employees)
        {
            employee.Describe();
        }
    }
}

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

public class Task1
{
    public decimal GetTotalSum(Order order)
    {
        decimal totalSum = order.GetSum();
        int discount = 0;

        if (order.PromoCode == "GOODDISCOUNT")
        {
            discount = 10;
        }
        if (order.PromoCode == "VERYNICEDISCOUNT")
        {
            discount = 15;
        }

        decimal vat = VatHelper.CalculateVATSum(totalSum);
        decimal discountSum = totalSum * discount / 100;

        return totalSum + vat - discountSum;
    }
}

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

public class ToDoListController : Controller
{
    private Repository _repository;

    public ToDoListController()
    {
        _repository = new Repository();
    }

    public IActionResult GetAll()
    {
        var items = _repository.GetAll<ToDoItem>();
        return Ok(items);
    }

    public IActionResult Insert(ToDoItem item)
    {
        if (string.IsNullOrEmpty(item.Title))
        {
            throw new ValidationException("Title is required.");
        }

        _repository.Save(item);

        EmailSender.Notify(ItemStatus.Created);

        return Ok(item);
    }
}


------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

public class Task2
{
    public async void DownloadFiles(Uri[] uris)
    {
        var tasks = new List<Task>();

        foreach (var uri in uris)
        {
            tasks.Add(DownloadFile(uri));
        }

        await Task.WhenAll(tasks);
    }

    private async Task DownloadFile(Uri uri)
    {
        var fileInfo = new FileInfo($"{Guid.NewGuid()}.pdf");

        HttpClient client = new HttpClient();
        var response = await client.GetAsync(uri);
        using (var ms = new MemoryStream())
        {
            await response.Content.CopyToAsync(ms);
            using (var fs = System.IO.File.Create(fileInfo.FullName))
            {
                ms.Seek(0, SeekOrigin.Begin);
                await ms.CopyToAsync(fs);
            }
        }
    }
}

------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------

public class Task3
{
    public async Task SaveMultithreading()
    {
        await Task.Run(() => 
        {
            using var db = new AppDbContext();
            var items = (from x in db.Items where x.Price > 1000 select x).ToList<Item>();
    
            foreach(var item in items)
                item.IsTooExpensive = true;
    
            db.SaveChanges();
        });
    }

    public async Task SaveAsync()
    {
        using var db = new AppDbContext();
        var items = await (from x in db.Items where x.Price > 1000 select x).ToListAsync<Item>();
    
        foreach(var item in items)
            item.IsTooExpensive = true;
    
        await db.SaveChangesAsync();        
    }
}
